///12/09/2006at18:00:29/// Time signature, do not change this line

/************************************************************************/
/* This file is part of openMask(c) INRIA, CNRS, Universite de Rennes 1 */
/* 1993-2002, thereinafter the Software                                 */
/*                                                                      */
/* The Software has been developped within the Siames Project.          */
/* INRIA, the University of Rennes 1 and CNRS jointly hold intellectual */
/* property rights                                                      */
/*                                                                      */
/* The Software has been registered with the Agence pour la Protection  */
/* des Programmes (APP) under registration number                       */
/* IDDN.FR.001.510008.00.S.P.2001.000.41200                             */
/*                                                                      */
/* This file may be distributed under the terms of the Q Public License */
/* version 1.0 as defined by Trolltech AS of Norway and appearing in    */
/* the file LICENSE.QPL included in the packaging of this file.         */
/*                                                                      */
/* Licensees holding valid specific licenses issued by INRIA, CNRS or   */
/* Universite Rennes 1 for the software may use this file in            */
/* acordance with that specific license                                 */
/************************************************************************/
/************************************************************************/
/* WARNING : GENERATED FILE. DO NOT MODIFY IT.                          */
/* Generated the 2006-09-12 at 18:00:29                                 */
/* Generated by omk version 1.2.0                                       */
/* Use just as it is or derive this class to add the  necessary         */
/* functions.                                                           */
/************************************************************************/
/************************************************************************/

#if !defined _TYPES_OVKPSTYPECHUNK_H_
#define _TYPES_OVKPSTYPECHUNK_H_

#include <OMKType.h>
#include "ovkCBuffer.h"

class OMK::SimulatedObject;
class OMK::ConfigurationParameterDescriptor;


/** \brief Class CTypeChunk generated.
 * \date generated the 2006-09-12 at 18:00:29
 * \author Yann Renard (INRIA/IRISA)
 * @description
 * This class is generated. \n
 * Use it by derivation to add the necessary methods.\n
 * @configurationParameters
 * \n \b xxx is a prefix that you can add to call to \ref loadParameters
 * to differentiate parameters when two \ref CTypeChunk are
 * used in the same object, see examples.\n
 * \n \b Optional \b parameters \n
 * The following parameters are optional and if one is missing in the configuration
 * parameters calls to \ref loadParameters always return true and never display message.
 * \li \b xxxIoConnectorIndex a "int".
 * \li \b xxxStartTime a "int".
 * \li \b xxxEndTime a "int".
 * \li \b xxxBuffer a "CBuffer".
 *
 *
 * \n \b Configuration \b examples \n
 * There is two ways to get the configuration parameters in the tree,  the one with a prefix
 * and the hierarchical one. The second one is the better. \n 
 * \n \b With \b prefix \n
 * The following sample of configuration parameters shows way with the prefix
 * \code
 myObject
 {
   Class ObjectWhichUsesCTypeChunk
   Scheduling
   {
     Frequency 75
     Process processA
   }
   UserParams
   {
     // Optional parameters
     firstIoConnectorIndex <int>
     firstStartTime <int>
     firstEndTime <int>
     firstBuffer <CBuffer>
     secondIoConnectorIndex <int>

     //... other object parameters
   }
 }
 * \endcode
 * \n To use these configuration parameters with prefix use the following codes: \n
 * In the header:
 * \code
 class ObjectWhichUsesCTypeChunk : public SimulatedObject
 {
   //...
  protected:
   CTypeChunk _omkTypeChunk1 ;
   CTypeChunk _omkTypeChunk2 ;
 } ;
 * \endcode
 * In the source:
 * \code
 void ObjectWhichUsesCTypeChunk::init()
 {
   //...
   _omkTypeChunk1.loadParameters( this, "first" ) ;
   _omkTypeChunk2.loadParameters( this, "second" ) ;
 }
 * \endcode
 * \n \b Hierarchical (better)\n
 * The hierarchical way is better because each node in the configuration tree
 * create a name space. This avoids names conflicts with inherited parameters. 
 * It is easier to create configuration with multiple instances of CTypeChunk
 * by copying pasting the node\n
 * The following sample of configuration parameters shows hierarchical way
 * \code
 myObject
 {
   Class ObjectWhichUsesCTypeChunk
   Scheduling
   {
     Frequency 75
     Process processA
   }
   UserParams
   {
     firstCTypeChunk
     {
       // Optional parameters
       IoConnectorIndex <int>
       StartTime <int>
       EndTime <int>
       Buffer <CBuffer>
     }
     secondCTypeChunk
     {
       // Optional parameters
       IoConnectorIndex <int>
     }
     //... other object parameters
   }
 }
 * \endcode
 * \n To use these hierarchical configuration parameters use the following codes: \n
 * The header is the same and in the source:
 * \code
 void ObjectWhichUsesCTypeChunk::init()
 {
   //...
   const ConfigurationParameterDescriptor* node = getConfigurationParameters();
   _omkTypeChunk1.loadParameters( node ? node->getSubDescriptorByName( "firstCTypeChunk"  ) : 0, "", this ) ;
   _omkTypeChunk2.loadParameters( node ? node->getSubDescriptorByName( "secondCTypeChunk" ) : 0, "", this ) ;
 }
 * \endcode
 *
 */
namespace OpenViBE {
namespace Kernel {
class CTypeChunk : public OMK::Type::Base
{
public:
	/// @name Constructors and destructor.
	//@{
	/// \brief Default constructor of\ref CTypeChunk.
	CTypeChunk();
	/// \brief Copy constructor of \ref CTypeChunk.
	CTypeChunk( const CTypeChunk& ref ) ;
	/// \brief Constructor of \ref CTypeChunk with all the parameters.
	CTypeChunk( OpenViBE::uint32 ioConnectorIndex,
		OpenViBE::uint64 startTime,
		OpenViBE::uint64 endTime,
		const OpenViBE::Kernel::CBuffer& buffer ) ;
	/// \brief Destructor of \ref CTypeChunk.
	virtual ~CTypeChunk() ;
	//@}

	/// @name Reset and loaders
	//@{
public:
	/// \brief Reset the default values of  \ref CTypeChunk.
	virtual void resetDefaultValues() ;
	
#if 0

	/// \brief Configuration parameters loader of \ref CTypeChunk.
	/// \param[in] node the root node of the configuration parameter
	/// \param[in] prefix the text that prefix the parameters name.
	/// No prefix by default. For example the parameter named \b "position" by default is
	/// loaded in the configuration parameters under the name \b "Position" (first is upper
	/// case), and with the prefix \b "first" will be loaded under the name \b "firstPosition"
	/// (could start with a lower case).
	/// \param[in] p the simulated object use by the \ref ParameterAccessor to display error messages.
	/// \return true if all \e needed parameters can be read else false.
	///
	/// Reads in the configuration node the values to set the attributs.
	bool loadParameters( const OMK::ConfigurationParameterDescriptor * node, 
			const std::string& prefix = "",
			OMK::SimulatedObject* p = 0 ) ;

	/// \brief Configuration parameters loader of \ref CTypeChunk.
	/// \overload
	/// \n The used node is the user param node of the simulated object
	bool loadParameters( OMK::SimulatedObject* p, const std::string& prefix = "" ) ;

protected:
	/// \brief Protected loader, does not reset the default values
	virtual bool innerParametersLoader( const OMK::ConfigurationParameterDescriptor * node,
					const std::string& prefix,
					OMK::SimulatedObject* p ) ;
	//@}

#endif

	/// @name Accessors to attributes.
	//@{
public:
	/// \brief Set the \b ioConnectorIndex value of \ref CTypeChunk.
	void setIoConnectorIndex( OpenViBE::uint32 ioConnectorIndex ) { _ioConnectorIndex = ioConnectorIndex ; }
	/// \brief Return the \b ioConnectorIndex value of \ref CTypeChunk.
	OpenViBE::uint32 getIoConnectorIndex() const { return _ioConnectorIndex ; }

	/// \brief Set the \b startTime value of \ref CTypeChunk.
	void setStartTime( OpenViBE::uint64 startTime ) { _startTime = startTime ; }
	/// \brief Return the \b startTime value of \ref CTypeChunk.
	OpenViBE::uint64 getStartTime() const { return _startTime ; }

	/// \brief Set the \b endTime value of \ref CTypeChunk.
	void setEndTime( OpenViBE::uint64 endTime ) { _endTime = endTime ; }
	/// \brief Return the \b endTime value of \ref CTypeChunk.
	OpenViBE::uint64 getEndTime() const { return _endTime ; }

	/// \brief Set the \b buffer value of \ref CTypeChunk.
	void setBuffer( const OpenViBE::Kernel::CBuffer& buffer ) { _buffer = buffer ; }
	/// \brief Return the \b buffer value of \ref CTypeChunk.
	const OpenViBE::Kernel::CBuffer& getBuffer() const { return _buffer ; }
	OpenViBE::Kernel::CBuffer& getBuffer() { return _buffer ; }
	//@}

	/// @name Operators.
	//@{
	/// \brief Comparison operator for equality
	bool operator == ( const CTypeChunk& ref ) const { return !( *this != ref ) ; } 
	/// \brief Comparison operator for difference
	bool operator != ( const CTypeChunk& ref ) const ;
	/// \brief Copy operator 
	CTypeChunk& operator = ( const CTypeChunk& ref ) ;
	//@}

	/// @name OMK::Packable, OMK::Flowable, OMK::Type interfaces.
	//@{
public:
	/// \brief Insert datas in an output stream 
	virtual void insertInStream( std::ostream& = std::cout ) const ;
	/// \brief Extract datas from an input stream 
	virtual void extract       ( std::istream& = std::cin  ) ;

	/// \brief Pack datas in the message
	virtual void pack  ( OMK::OutgoingSynchronisationMessage& out ) const ;
	/// \brief Unpack datas from the message
	virtual void unpack( OMK::IncomingSynchronisationMessage& in  ) ;

	/// \brief Default polator creator
	virtual OMK::Type::PolatorNT* createPolator() ;
	//@}
protected:
	/// \brief Copy methods call by constructor and operator.
	void _copy( const CTypeChunk& ref ) ;

	/// @name Datas
	//@{
	/// \brief This member holds the \b ioConnectorIndex values of \ref CTypeChunk.
	OpenViBE::uint32 _ioConnectorIndex ;
	/// \brief This member holds the \b startTime values of \ref CTypeChunk.
	OpenViBE::uint64 _startTime ;
	/// \brief This member holds the \b endTime values of \ref CTypeChunk.
	OpenViBE::uint64 _endTime ;
	/// \brief This member holds the \b buffer values of \ref CTypeChunk.
	OpenViBE::Kernel::CBuffer _buffer ;
	//@}

public:
	bool m_bDeprecated;
} ;
} ;
} ;

#endif // defined _TYPES_OVKPSTYPECHUNK_H_
